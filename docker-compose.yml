# services - це те за допомогою чого будуть створюватися containers за допомогою docker-compose
services:
  # web-app - django development server
  web-app:
    build:
      # context: . - шлях до директорії з Dockerfile
      # Dockerfile - буде використаний docker-compose для білда image і запуску з нього containera
      context: .
    ports:
      - "8000:8000"
    # volumes - місця для зберігання даних, ./service - локальна папка яку підключуємо до контейнера
    # всі зміни які будем робити локально будуть зберігатися в докер-контейнері (щоб не робити ребілдів)
    volumes:
      - ./service:/service
    environment:
      - DB_HOST=database # DB_HOST - вказуєм силку на інший сервіс docker-compose, а саме: database
      - DB_NAME=dbname
      - DB_USER=dbuser
      - DB_PASS=pass

    # command - для запуску django server
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"

    # depends_on - вказуємо що web-app буде запущено після запуску database
    depends_on:
      - database

  # database - база даних
  database:
    # postgres - використовуєм образ з docker-hub
    # 14.6-alpine - версія образу
    image: postgres:14.6-alpine
    # прописуєм зміні: POSTGRES_DB, POSTGRES_USER, POSTGRES_PASSWORD щоб звязатися з web-app
    environment:
      - POSTGRES_DB=dbname
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data # Це стандартний шлях, де PostgreSQL зберігає свої дані в контейнері.

  redis:
    image: redis:7.0.5-alpine
    hostname: redis

  # worker(celery)
  worker:
    # build - робем білд для такогож приложенія як web-app(з таким ж залежностями і конфігом)
    build:
      context: . # Використовуємо той самий Dockerfile, що і для web-app
    hostname: worker
    # entrypoint - вказуємо команду за якою будем викликати інші команди до цього сервісу
    entrypoint: celery
    # celery_app - файл який ми зараз створили
    # app - зміна в цьому файлі яку зараз створимо
    # info - це рівень, який забезпечує детальну інформацію про роботу worker'а, але без надмірної деталізації.
    # Інші можливі рівні: debug, warning, error, critical.
    # --loglevel=info то саме що -l info
    command: -A celery_app.app worker --loglevel=info
    volumes:
      - ./service:/service
    links:
      - redis
    depends_on:
      - redis

  # Flower - це вебінтерфейс для моніторингу Celery
  flower:
    build:
      context: .
    hostname: flower
    entrypoint: celery
    command: -A celery_app.app flower
    volumes:
      - ./service:/service
    links:
      - redis
    depends_on:
      - redis
    ports:
      - "5555:5555"

# postgres_data додали назву для volumes
volumes:
  postgres_data: